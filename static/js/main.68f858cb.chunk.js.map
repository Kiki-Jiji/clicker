{"version":3,"sources":["components/click/click.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Click","props","state","clicks","addClick","bind","minusClick","resetCLick","this","setState","Container","Row","Col","md","className","offset","Button","onClick","variant","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uVA0DeA,E,YAjDb,WAAYC,GAAQ,IAAD,8BACnB,4CAAMA,KACDC,MAAQ,CACXC,OAAQ,GAGV,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBARC,E,wEAYhBG,KAAKC,SAAS,CAACN,OAAQK,KAAKN,MAAMC,OAAS,M,mCAI5CK,KAAKC,SAAS,CAACN,OAAQK,KAAKN,MAAMC,OAAS,M,mCAI3CK,KAAKC,SAAS,CAACN,OAAO,M,+BAItB,OAEE,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACf,wBAAIC,UAAU,SAASN,KAAKN,MAAMC,UAGlC,kBAACQ,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGE,OAAQ,GACpB,yBAAKD,UAAY,WACf,kBAACE,EAAA,EAAD,CAAQC,QAAST,KAAKJ,UAAtB,OACA,kBAACY,EAAA,EAAD,CAAQE,QAAQ,UAAUD,QAAST,KAAKD,YAAxC,OACA,kBAACS,EAAA,EAAD,CAAQE,QAAU,SAASD,QAAST,KAAKF,YAAzC,e,GAtCca,IAAMC,WCQXC,E,iLAPb,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,W,GALYK,IAAMC,WCMJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.68f858cb.chunk.js","sourcesContent":["import React from 'react'\nimport './click.css'\n\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\n\nclass Click extends React.Component {\n  constructor(props) {\n  super(props);\n  this.state = {\n    clicks: 0\n  }\n\n  this.addClick = this.addClick.bind(this);\n  this.minusClick = this.minusClick.bind(this);\n  this.resetCLick = this.resetCLick.bind(this);\n}\n\n  addClick() {\n     this.setState({clicks: this.state.clicks + 1})\n  }\n\n  minusClick() {\n    this.setState({clicks: this.state.clicks - 1})\n  }\n\n  resetCLick() {\n    this.setState({clicks:0})\n  }\n\n  render() {\n    return(\n\n      <Container>\n        <Row>\n          <Col md={6}>\n    <h1 className=\"click\">{this.state.clicks}</h1>\n    </Col>\n    </Row>\n    <Row>\n    <Col md={6} offset={5}>\n    <div className = \"buttons\">\n      <Button onClick={this.addClick}> + </Button>\n      <Button variant=\"warning\" onClick={this.resetCLick}> ? </Button>\n      <Button variant = \"danger\" onClick={this.minusClick}> - </Button>\n    </div>\n      </Col>\n    </Row>\n  </Container>\n\n    )\n  }\n\n}\n\n\nexport default Click;\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Click from '../click/click.js'\n\nclass App extends React.Component {\n\n  render() {\n  return (\n    <div className=\"App\">\n      <Click />\n    </div>\n  );\n }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}